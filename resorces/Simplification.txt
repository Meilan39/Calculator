
addition_compressible()
    

factor
    - 
addition
    - IF parenthesis
        - delete parenthesis
    - IF sign
        - update sign
        - delete sign
    - combine like terms
        - delete zero terms
multiplication
    - IF parenthesis
        - IF multiplication THEN delete parenthesis
        - IF addition THEN distribute
    - sort
    - consolidate to fraction of unresolveables
        - IF zero term THEN delete
        - IF divide by zero THEN error
exponentiation
    - IF parenthesis
        - IF exponentiation THEN remove parenthesis
        - IF multiplication THEN group rational
        - IF addition THEN distribute
    - 
primary
    - 

functions:
    - IF sin
        - IF 0 RETURN 0 
        - IF n*pi THEN 0
        - IF n*pi/2 THEN (-1)^(n+1)
        - IF n*pi/3 THEN (sqrt(3)/2)*(-1)^(floor(n/3))
        - IF n*pi/4 THEN (sqrt(2)/2)*(-1)^(floor(n/4))
        - IF n*pi/6 THEN (1/2)*(-1)^(floor(n/6))
    - IF cos
        - IF 0 THEN 1
        - IF n*pi THEN (-1)^n
        - IF n*pi/2 THEN 0
        - IF n*pi/3 THEN (1/2)*(-1)^(floor((n+1)/3))
        - IF n*pi/4 THEN (sqrt(2)/2)*(-1)^(floor((n+2)/4))
        - IF n*pi/6 THEN (sqrt(3)/2)*(-1)^(floor((n+3)/6))
    - IF tan
        - IF 0 THEN 0
        - IF n*pi THEN 0
        - IF n*pi/2 THEN inf
        - IF n*pi/3 THEN (sqrt(3)/2)*(-1)^(floor(n/3))
        - IF n*pi/4 THEN (sqrt(2)/2)*(-1)^(floor(n/4))
        - IF n*pi/6 THEN (1/2)*(-1)^(floor(n/6))



<additive_expression> ::= <multiplicative_expression> {<additive_expression_suffix>}*
<additive_expression_suffix> ::=  + <multiplicative_expression>
                               |  - <multiplicative_expression>

<multiplicative_expression> ::= {<sign>}? <exponential_expression> {<multiplicative_expression_suffix>}*
<multiplicative_expression_suffix> ::=  * <exponential_expression>
                                     |  / <exponential_expression>
                                     | <exponential_expression>

<exponential_expression> ::= <primary_expression> {<exponential_expression_suffix>}*
<exponential_expression_suffix> ::= ^ <primary_expression>

<primary_expression> ::= <real_number>
                       | <functions>
                       | <variable>
                       | ( <expression> )
                       | { <expression> }

<real_number> ::= <rational> | <irrational>

<rational> ::= <scientific> | <decimal> | <number> | <zero>

<irrational> ::= e | pi

<scientific> ::= <decimal> E {<sign>}? <number>
               | <number> E {<sign>}? <number>